#!/bin/bash

# exit when any command fails
set -e
set -o pipefail

# assumes that the veracrypt encrypted volume has been already created 

usage () {
	echo ""
	echo "Try 'backup --help' for more information"
	exit 1
}

mount () {
	# mount the encrypted veracrypt volume
	# where the veracrypt encrypted volume will be mounted
	MOUNT_POINT=
}

dismount () {
	# unmount the veracrypt encrypted volume
	return
}

get_backup_details () {
	# path where the encrypted volume is located
	BACKUP_LOCATION=./test/backup

	# list of all files and folders in the backup
	FILES=(
		"./test/docs"
		"./test/vids"
		#./test/photos"
		#./test/backup"
	)

	EXCLUDED_FILES=(
		# Note: when excluding directories, make sure NOT to use the traililng
		# slash(/) at the end of the path

		#"./test/docs"	
		#"./test/vids"
	)
}

validate_backup_details () {
	# TODO: test paths with spaces and characters that aren't POSIX standard

	if [ ! -d "$BACKUP_LOCATION" ]; then
		echo "Backup location '"$BACKUP_LOCATION"' does not exist.">&2
		usage
	fi

	# check if array is empty

	for file in "${FILES[@]}"; do
		if [ ! -d "$file" ]; then
			echo "Files "$file" do not exist.">&2
			usage
		fi
	done
}


get_backup_filename () {
	# collect and compress the list of files onto the $backup_location/YYYY-MM-dd-HHmmss_backup
	echo ".$(date +%F-%H%M%S)_backup"
}


format_excluded_files () {
	# tar requires that all exluded files/directories are prefixed with --excluded	

	""$BACKUP_LOCATION"/$(get_backup_filename).tgz"

	local excluded_files_string=


	if [ "${#EXCLUDED_FILES[*]}" -eq 0 ]; then
			exluded_files_string=""
	else
		for excluded_file in "${EXCLUDED_FILES[@]}"; do	
			excluded_files_string="$excluded_files_string --exclude="$excluded_file" "
		done
	fi

	echo "$excluded_files_string"
}


backup () {
	get_backup_details
	validate_backup_details


	echo "Full backup started."

	echo " tar czpvf "$BACKUP_LOCATION"/$(get_backup_filename).tgz $(format_excluded_files) ${FILES[*]} "

	echo "Full backup completed successfully."
}


case "$1" in 	
	"")				#mount
					backup
					#dismount	
					;;
	-h|--help)		usage
					return
					;;
	*)				usage
					;;
esac




