#!/bin/bash

# exit when any command fails
set -e
set -o pipefail

# assumes that the veracrypt encrypted volume has been already created 

usage () {
	echo ""
	echo "Try 'backup --help' for more information"
	exit 1
}

mount () {
	# mount the encrypted veracrypt volume
	# where the veracrypt encrypted volume will be mounted
	MOUNT_POINT=
}

dismount () {
	# unmount the veracrypt encrypted volume
	return
}

get_backup_details () {
	# path where the encrypted volume is located
	# the backup location should be a folder, therefore it should not contain a
	# slash at the end
	# TODO: check if contains slash
	BACKUP_LOCATION=./test/backup

	# list of all files and folders in the backup
	FILES=(
		"./test/docs"
		"./test/vids"
		#./test/photos"
		#./test/backup"
	)

	EXCLUDED_FILES=(
		# Note: when excluding directories, make sure NOT to use the traililng
		# slash(/) at the end of the path

		#"./test/docs"	
		"./test/vids"
	)
	# TODO: paths that are both inn the excluded and in the files to be backup are
	# indeed being backup, solve it 

	FINGERPRINT_FILENAME="backup.md5sum"
	# var not used anymore, it will be replaced by [date]FINGERPRINT_FILENAME
	# according to new algorithm
	#INCOMING_FINGERPRINT_FILENAME="incoming_backup.md5sum"

	# collect and compress the list of files onto the $backup_location/YYYY-MM-dd-HHmmss_backup
	BACKUP_TIMEFILENAME="$(date +%F-%H%M%S)_backup"

}

validate_backup_details () {
	# TODO: test paths with spaces and characters that aren't POSIX standard

	if [ ! -d "$BACKUP_LOCATION" ]; then
		echo "Backup location '"$BACKUP_LOCATION"' does not exist.">&2
		usage
	fi

	# check if array is empty

	for file in "${FILES[@]}"; do
		if [ ! -d "$file" ]; then
			echo "Files "$file" do not exist.">&2
			usage
		fi
	done
}

# todo: name needs to be generated once and not everytime a function calls it.
get_backup_timefilename () {
	# collect and compress the list of files onto the $backup_location/YYYY-MM-dd-HHmmss_backup
	echo "$(date +%F-%H%M%S)_backup"
}


format_files_for_backup () {
	local files_string=

	if [ "${#FILES[*]}" -eq 0 ]; then
			files_string=""
	else
		for file in "${FILES[@]}"; do	
			files_string="$FILES "$file" "
		done
	fi

	echo "$files_string"
}

format_excluded_files () {
	# tar requires that all exluded files/directories are prefixed with --excluded	
	local excluded_files_string=

	if [ "${#EXCLUDED_FILES[*]}" -eq 0 ]; then
			exluded_files_string=""
	else
		for excluded_file in "${EXCLUDED_FILES[@]}"; do	
			excluded_files_string="$excluded_files_string --exclude="$excluded_file" "
		done
	fi

	echo "$excluded_files_string"
}


create_fingerprint () { # arg1: initial-bak || incoming-bak
	if [ "$1" == 'initial-bak' ]; then
		echo "Creating backup fingerprint..."	
		find $(format_files_for_backup) -type f -exec md5sum {} + | sort -k 2 > \
		"$BACKUP_LOCATION/$BACKUP_TIMEFILENAME"'_full.md5sum'

	elif [ "$1" == 'incoming-bak' ]; then
		echo "Creating fingerprint file for incoming backup files..."
		find $(format_files_for_backup) -type f -exec md5sum {} + | sort -k 2 > \
		"$BACKUP_LOCATION/$BACKUP_TIMEFILENAME"'.md5sum'
	else
		echo "Error: invalid parameter"
		exit 1
	fi
}


check_if_incremental_backup_required () {
	echo "Checking for newer changes..."

	if [ -z "$(get_list_changed_files)" ]; then
		echo "No changes found."
		echo "Deleting last md5sum just created for comparison"
		rm -f "$BACKUP_LOCATION/$(get_fingerprint temporary)"
		exit 1

	elif [ -z "$(get_list_changed_files only-added)" ]; then
		echo "The changes consist of only deleted files. \
				Therefore no incremental backup is needed"	
		exit 1

	else
		echo "Newer files/changes found."
	fi
}


# change it to one single method with params

get_fingerprint () { # param1: 
	if [ "$1" == 'temporary' ]; then 
		# fingerprint created temporarily to check for changes
		local incoming_md5sum="$(ls -1Aht "$BACKUP_LOCATION" | head -n 1)"
		echo "$incoming_md5sum"

	elif [ "$1" == 'last-bak' ]; then
		# fingerprint created in the last backup
		local last_backup_md5sum="$(ls -1Aht "$BACKUP_LOCATION" | head -n 2 | tail -n 1)"
		echo "$last_backup_md5sum"

	else
		echo "Error: invalid parameter"
		exit 1

	fi
}


get_list_changed_files () { # arg1: only-added
	# Added the `|| true' because diff throws the "file not found" error message
	# and stops the script, so far I couldn't find a more elegant solution

	if [ "$1" == 'only-added' ]; then
		local list_only_added_files="$(diff --suppress-common-lines \
			"$BACKUP_LOCATION/$(get_fingerprint last-bak)" \
			"$BACKUP_LOCATION/$(get_fingerprint temporary)" \
			| grep '^>' | cut -d ' ' -f 4 || true)"

		echo "$list_only_added_files"
		
	else
		local list_changed_files="$(diff --suppress-common-lines \
			"$BACKUP_LOCATION/$(get_fingerprint last-bak)" \
			"$BACKUP_LOCATION/$(get_fingerprint temporary)" 
		)"

		echo "$list_changed_files"
	fi
}


perform_incremental_backup () {			
		local list_added_files="$(get_list_changed_files only-added)" 
	
		echo "Incremental backup started."
		echo " tar czpvf "$BACKUP_LOCATION/$BACKUP_TIMEFILENAME" \
		"${list_added_files[*]}" "
		echo "Incremental backup completed successfully."	

		exit 0
}


perform_full_backup () {	
	echo "Full backup started."
	tar czpvf "$BACKUP_LOCATION"/full-backup.tgz $(format_excluded_files) \
		${FILES[*]}
	echo "Full backup completed successfully."

	exit 0
}


main () {
	get_backup_details

	validate_backup_details

	# TODO: bug - the files in the tar.gz and in the md5sum differs. because the
	# tar.gz DOES take into account the --exluded files, but the md5sum does NOT

	local existing_md5sums_list="$(find "$BACKUP_LOCATION" -name '*.md5sum')"
	if [ "$existing_md5sums_list" == "" ]; then
		echo "Fingerprint file not found." 

		create_fingerprint initial-bak

		perform_full_backup
	
	else
		echo "Fingerprint file found."

		create_fingerprint incoming-bak

		check_if_incremental_backup_required

		perform_incremental_backup		
	fi
}


case "$1" in 	
	"")				#mount
					main
					#dismount	
					;;
	-h|--help)		usage
					return
					;;
	*)				usage
					;;
esac




